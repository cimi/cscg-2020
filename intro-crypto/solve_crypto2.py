from fractions import gcd
from Crypto.Util.number import long_to_bytes

N = 11081631875903145989449935723431993312048263659503073501368579288661507666926127398551161494057149306128113773163942639308834214121175806650609216999457699806761832905200688030797211656004392019494461369905299150414106039926917206543955359193966893148964232596310365304968051716316421386564037673515738090636958039103706945349258789436043666088184674948218539196263599899299117746103356732914111330139176914363944699056706536973601851519543254647327613986429683489937828404640743341705415177790924588759219148196121101333618974290049804819348181073769764832469557718828674823915162708288827812462173689965257895702511
# the number is a square :/
# gmpy2.isqrt(N)
p = 105269330176947292996638200435938306898008923026214454261833875185727477089897046111427146733705930821830266909665628457524081078905360676252447567252776868229878866771906188152589974886284283170888631961882151644823439854179072943695999068501018297820499189273623372907923121271707038222250931356234064524943

e = 65537
# = 10327849034940138613515485956077213322791085874638285662823764630659653931824178919168344401508423966366637831067655701114352106747323628144645384205073278784870804834942988268503504130770762781798270763453272421050209487483563600870343875197428105079394315585993355808937811229959083289653056248770988647762812998870912510238393368777882358059256678052653963583286245796285737035786447522814310717433588049686223718247661713594680120785280795132759253149754143640871380226770164628599577669124463514838464342769690232097283333816896581904763736283142031118073027496197756777460403007359764250621763279762041468943079L

def xgcd(a, b):
  prevx, x = 1, 0; prevy, y = 0, 1
  while b:
    q = a / b
    x, prevx = prevx - q*x, x
    y, prevy = prevy - q*y, y
    a, b = b, a % b
  return a, prevx, prevy

def lcm(a, b):
  return abs(a*b) // gcd(a, b)

def modinv(a, m):
    """return x such that (x * a) % b == 1"""
    g, x, _ = xgcd(a, m)
    if g != 1:
        raise Exception('gcd(a, b) != 1')
    return x % m

q = N / p
l = lcm(p - 1, q - 1)
# d = modinv(pow(e, -1), l)
phin = (p-1) * (q-1)
# import gmpy
# slightly cheating :) python RsaCtfTool.py --publickey /pwd/crypto2.pem --private > /pwd/crypto2_privkey.pem
d = 9410180160180690001142374885643793457163281339986039130539453660872335088267281718482219806632413341847228095642457478413953059863461494906994585416693164313989189691933239090741511254405243216334372402733871070064937811221337509782019373023828456254118398346733363595405374278902627264065517564223230483850592366063040480660958730662578092189582641027965094064929775606941457340069428080012051766251996104704048924482207136210364067936572301797816103110415210782314747226572568199436255716765759027107976803081087027553033172218140961638177296684269917936981903114352839394576852159111093965803370195924016297568577
print(phin, d, e, d * e % phin)
# print(d, e, d*e %phin)
# print(str(d))
# 16584235167731787847013470803061277015678956556694867873072487447887926204573222554710220299137896151698893829263470795092022504576184748229461509022182668168932373990476110465504678644868916760949835108178505407538822880225906663932043264799941076095252059950113859004542443496612744563482124073298940744796576800151123820336528353672466777346414021097764537645521638337450661718385755338513002335497796149161099248732899206255277182670571055097076123763356692547858422108949105868315872104780985522044066316665393121965734834334905254114025888811325924997427587424504748731773056980012499780203906986519558329L

m = 6213639477312598145146606285597413094756028916460209994926376562685721597532354994527411261035070313371565996179096901618661905020103824302567694878011247857685359643790779936360396061892681963343509949795893998949164356297380564973147847768251471545846793414196863838506235390508670540548621210855302903513284961283614161501466772253041178512706947379642827461605012461899803919210999488026352375214758873859352222530502137358426056819293786590877544792321648180554981415658300194184367096348141488594780860400420776664995973439686986538967952922269183014996803258574382869102287844486447643771783747439478831567060
decrypted = pow(m, d, N)
print(long_to_bytes(decrypted))
