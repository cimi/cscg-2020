from pwn import *
from Crypto.PublicKey import RSA
import OpenSSL.crypto as crypto
from factordb.factordb import FactorDB

m = int.from_bytes(b"Hello! Can you give me the flag, please? I would really appreciate it!", "big")
c = int.from_bytes(b"Quack! Quack!", "big")

def find_d_and_factored_kN(c,m):
  """Find small d and factored kN that decrypt successfully."""
  for d in range(3, 100):
    kn = pow(c, d) - m 
    f = FactorDB(kn)
    f.connect()
    if f.get_status() == 'FF':
      print(d, " Win!")  
      print(kn)
      print(f.get_factor_list())
    else:
      print(f.get_status())

def find_e(p, q, d):
  """Find e that satisfies congruence relationship."""
  found = False
  for k in range(3, 100):
    # pick k such that (k*(p-1)*(q-1) + 1) / d is an integer
    if (k * (p-1) * (q-1) + 1) % d == 0:
      print(k, "Win!")
      found = True
      e = (k * (p-1) * (q-1) + 1) // d
      return e
  if not found:
    print(d, "No win!")
    return

def try_genkey(p, q, d):  
  e = find_e(p, q, d)
  if e == None:
    print("Invalid parameters, no e found!")
    return
  
  with open("crafty.pem", "wb") as kf:
    key = RSA.construct((p*q, e, d, p, q))
    kf.write(key.exportKey())
    print("Key saved as crafty.pem")

# we get p and q for free because we filtered for kN with known factorings
# we pick two of the prime factors with p*q > m and try to get a valid e
#Â the first one doesn't work, the second does.
candidates = [
  {
    'p': 486971673062451698421965960581853944961060238004734471914901229833223872401697156835759898436413520856029502249441021893800779968712694197599231586347384840598671815819885176525264064884691933162685208872414575505913331770143561423015300338573389869852083329014919242484096083420531772953599765737499306105090207622564162857126103715717821412914977120839435931919914761422739331468223761928340062665452082143,
    'q': 235181736767,
    'd': 14
  },
  {
    'p': 336033857574360962454943903216289945649765822309848471693346190216197272616067549327344896415921882492039323472956041319420800351281777116492472083651265665332365254118661543408652767207143404479327991464700277290504236916721503709603145031141394270437533144989846789972283986447490738428134046704592856539677103436465777880468151284614609736739715100705861138605648116005837837049994779681893669491435220741392644887890247499137378469314818097218444624942178717693426856695561094447970291134510441431290597595513852874409021265458728399342876694834314108324659501915487351476873818329432091722128552759205650068007136367292716658882882983111184044997718414904982479868759786653053464827463634293900835582269048762771237845413449976601524111743561629222515754805769874218769761371417532226473288295524234181212721066044610429961980379860677516098121272787751056645019565397037176883765222191645735353705152511814880988238064422481785785104850903365104575424879968369225827917846434147103891205801740511961902741008044687372904284639798417219780447022938951605942516034924157176468609654036288763003239757435692404072068878662349617551829480232476554332380934910119855159927838841299851934585675475672488969718449585888812038786028552856090620783182010887771931740972556378539441489707142365009069311659404925814133793573037040654937020459239044149203228856767871637318465627027736647930099222602225293040698084709012563111362969595918826024121031679312149428378783124417802732292569360867902005719017435603384468377554184101358119479797768270088476095202011279016332860730656735780099979777672229519433857030492401038867307463803339671841610053142306691412687199600024634456372503698912242581727473472494851105025687495898305761012885047430595861163192298995694870458673102464308989885311763426895709533816225955966665676122218080000217419918916989525741098290316300448487872358478965690479879744594783668039569394938680436382604918669956921138231275178133377627265520635263056078626133235770777127274021168248275029371353157518026792537688272862603591655484787842064761419164770968212873624358946665822950619446078022574585781882198070261895459409834855392101627197989633712206166261032248402492295402006453803048334595554985480518858435315990731148228049614118258426705457675784781266442603008897229908514870529752928133065031892788350436652967005760044738417643500087492972857597136913381480639668976267080299914765588962297193358974986298791280200268207353174952205573005351999817191479776594533789986138843092824704611572147151098701446404068980404705448642876616183766400185056084360014524998909561687812295604475302268912070382490944066080857988886912324369747154492905604984180658700301179683511540018982890670973896790539517244138705381763279115527569027293337704860183359738405492045276991257939897172925772828787290942066534693696330757451434218185212407876542527581226080495731331188184318853345821836870369854662404183204053767743257,
    'q': 137573,
    'd': 97
  }
]

for c in candidates:
  try_genkey(c['p'], c['q'], c['d'])
